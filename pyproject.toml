[project]
name = "ops"
description = "The Python library behind great charms"
readme = "README.md"
requires-python = ">=3.8"
authors = [
    {name="The Charm Tech team at Canonical Ltd.", email="charm-tech@lists.launchpad.com"},
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
]
dependencies = [
    "PyYAML==6.*",
    "websocket-client==1.*",
]
dynamic = ["version"]

[project.optional-dependencies]
docs = [
    "sphinx==6.2.1",
    "sphinx-design",
    "furo",
    "sphinx-tabs",
    "lxd-sphinx-extensions",
    "sphinx-copybutton",
]

[project.urls]
"Homepage" = "https://juju.is/docs/sdk"
"Repository" = "https://github.com/canonical/operator"
"Issues" = "https://github.com/canonical/operator/issues"
"Documentation" = "https://ops.readthedocs.io"
"Changelog" = "https://github.com/canonical/operator/blob/main/CHANGES.md"

[build-system]
requires = [
    "setuptools>=60",
]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
version = {attr = "ops.version.version"}

# Testing tools configuration
[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true

# Formatting tools configuration
[tool.autopep8]
max-line-length = 99
ignore = ["W503"]
recursive = true
jobs = -1
aggressive = 3

# Linting tools configuration
[tool.ruff]
line-length = 99
target-version = "py38"

# Notes:
# 1. Ruff does not yet implement all of the pycodestyle rules, which
# we checked/fixed with autopep8, see: https://github.com/astral-sh/ruff/issues/2402
# 2. Ruff implements all Flake8 rules (the "F" rules).
# 3. flake8-docstrings is not listed in the Ruff re-implementation list.
# 4. Ruff reimplements flake8-builtins.
# 5. Ruff's isort is "profile='black'".
# 6. We had "R" rules enabled, what are those from?

[tool.ruff.lint]
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # isort
    "I001",
    # pep8-naming
    "N",
    # mccabe
    "C",
    # flake8-builtins
    "A",
    # flake8-copyright
    "CPY",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-annotations
    "ANN",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # Ruff specific
    "RUF",
    # Perflint
    "PERF",
    # flake8-pytest-style
    "PT",
    # pyflakes-docstrings
    "D",
]
ignore = [
    # Use of `assert` detected
    "S101",
    # Do not `assert False`
    "B011",
    # `pickle`, `cPickle`, `dill`, and `shelve` modules are possibly insecure
    "S403",
    # `subprocess` module is possibly insecure
    "S404",

    # No explicit `stacklevel` keyword argument found
    "B028",

    # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "SIM117",

    # Missing type annotation for `self` in method
    "ANN101",
    # Missing type annotation for `cls` in classmethod
    "ANN102",

    # Missing docstring in magic method
    "D105",
    # Missing docstring in `__init__`
    "D107",

    ## Likely worth doing, but later.

    # Convert {} from `TypedDict` functional to class syntax
    "UP013",
    # Missing return type annotation for public function `restore`
    "ANN201",
    # Missing return type annotation for private function
    "ANN202",
    # Missing return type annotation for special method {}
    "ANN204",
    # Missing return type annotation for staticmethod
    "ANN205",
    # Missing return type annotation for classmethod
    "ANN206",
    # Dynamically typed expressions (typing.Any) are disallowed
    "ANN401",
    # `subprocess` call: check for execution of untrusted input
    "S603",
    # Prefer `next(iter(info_dicts))` over single element slice
    "RUF015",
    # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF012",
    # Unnecessary `tuple` call (rewrite as a literal)
    "C408",

    ## (Remove once we move to pytest native tests).

    # Use `pytest.raises` instead of unittest-style `assertRaises`
    "PT027",
    # PT009 Use a regular `assert` instead of unittest-style {}
    "PT009",
]
[tool.ruff.per-file-ignores]
"test/*" = ["D", "ANN", "S101", "S105", "S106", "RUF015", "PT018", "PT015"]
"docs/conf.py" = [
    "CPY001",  # Missing copyright notice at top of file
    "D100",  # Missing docstring in public module
    "I001",  # [*] Import block is un-sorted or un-formatted
    "ANN001",  # Missing type annotation for function argument `context`
    "ANN202",  # Missing return type annotation for private function `_compute_navigation_tree`
    "A001",  # Variable `copyright` is shadowing a Python builtin
    "RUF003",  # Comment contains ambiguous {}
    "RUF019",  # [*] Unnecessary key check before dictionary access
]
"ops/_private/timeconv.py" = [
    "RUF001",  # String contains ambiguous `µ` (MICRO SIGN). Did you mean `μ` (GREEK SMALL LETTER MU)?
    "RUF002",  # Docstring contains ambiguous `µ` (MICRO SIGN). Did you mean `μ` (GREEK SMALL LETTER MU)?
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id", "min", "map", "range", "type", "TimeoutError", "ConnectionError", "Warning", "input", "format"]

[tool.ruff.lint.mccabe]
# TODO IN THIS PR: we had this enabled in pyflakes, why is it finding issues now?
max-complexity = 22

[tool.pyright]
include = ["ops/*.py", "ops/_private/*.py", "test/*.py", "test/charms/*/src/*.py"]
pythonVersion = "3.8" # check no python > 3.8 features are used
pythonPlatform = "All"
typeCheckingMode = "strict"
reportIncompatibleMethodOverride = false
reportImportCycles = false
reportMissingModuleSource = false
reportPrivateUsage = false
reportUnnecessaryIsInstance = false
reportUnnecessaryComparison = false
disableBytesTypePromotions = false
stubPath = ""
